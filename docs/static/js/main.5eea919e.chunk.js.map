{"version":3,"sources":["components/ConsoleLine/ConsoleLine.tsx","components/ConsoleInput/ConsoleInput.tsx","components/Projects/MathSocLib/MathSocLib.tsx","models/projects/mathsoclib.tsx","models/directory.tsx","components/Console/Console.tsx","assets/me.jpg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ConsoleLine","children","className","ConsoleInput","setUserInput","userInput","handlePressedEnter","currDir","autoFocus","type","onChange","event","target","value","onKeyDown","key","MathSocLib","mathsoclib","name","display","Directory","parent","subdirectories","files","this","Console","useState","initialScreen","Date","toString","help","screen","setScreen","rootDir","projDir","undefined","hackathons","internships","initializeDir","setCurrDir","useEffect","element","document","getElementById","scrollIntoView","behavior","console","log","finalScreen","length","trim","map","subDir","file","split","requestedDirectory","prevDir","cand","find","dir","requestedFile","id","App","src","Me","displayComponent","setDisplayComponent","transitionToConsole","setTimeout","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5eea919e.chunk.js","sourcesContent":["import React from 'react';\nimport './ConsoleLine.css';\n\n\ninterface ConsoleLineProps {\n  children : any,\n  className? : any\n}\n\n\nfunction ConsoleLine({ children, className}: ConsoleLineProps) {\n  return (\n    <div className = {`px-1 pt-1 ${className}`}>\n\n        <p className={`text-2xl text-console-white`}> {children}</p>\n\n\n    </div>\n  );\n}\n\nexport default ConsoleLine;\n","import React, { FormEvent, SyntheticEvent } from 'react';\nimport './ConsoleInput.css';\n\nfunction ConsoleInput({ setUserInput, userInput,  handlePressedEnter, currDir}: {setUserInput: any, handlePressedEnter:any, userInput:any, currDir: string}) {\n\n\n  const handleUserTyping = (event:SyntheticEvent ) => {\n    let target= event.target as HTMLInputElement;\n    \n  \n    setUserInput(target.value);\n    \n  }\n\n  const handleUserKeyDown = (event: any) => {\n    if(event.key === 'Enter'){\n      handlePressedEnter();\n    }\n  }\n\n\n  return (\n    <div >\n      <p className=\"text-pink-500 text-2xl pl-1 pt-1 bg-transparent inline\" >{\"/\" + currDir}&gt; </p>\n      <input className=\"text-console-white text-2xl pt-1 bg-transparent inline outline-none w-10/12 text-pink-500 \" autoFocus type=\"text\" onChange={handleUserTyping} onKeyDown={handleUserKeyDown} value={userInput}></input>\n    </div>\n  );\n}\n\nexport default ConsoleInput;\n","import ConsoleLine from \"../../ConsoleLine/ConsoleLine\";\n\n\nfunction  MathSocLib() {\n\n\n  \n\n\n  return (\n    <div className=\"font-console\">\n\n\n      <ConsoleLine>WIP</ConsoleLine>\n\n\n\n    </div>\n  );\n}\n\nexport default MathSocLib;\n","import MathSocLib from \"../../components/Projects/MathSocLib/MathSocLib\";\nimport { File } from \"../directory\";\n\n\n\n\nlet mathsoclib: File = {\n  name: \"MathSocLibrary\",\n  display: <MathSocLib></MathSocLib>\n}\n\nexport default mathsoclib;","import mathsoclib from \"./projects/mathsoclib\";\n\n\n\nexport interface File {\n  name: string;\n  display: any; //component\n}\n\n\n\n\nexport class Directory {\n\n  name: string;\n  parent?: Directory;\n  subdirectories?: Directory[];\n  files?: File[];\n\n  constructor(name: string, parent?: Directory, subdirectories?: Directory[], files?: File[]) {\n    this.name = name;\n    this.parent = parent;\n    this.subdirectories = subdirectories;\n    this.files = files;\n  }\n\n}\n\n\n\n\n\n\nexport function initializeDir() //returns rootDir\n{\n  let rootDir = new Directory(\n    \"\"\n  )\n\n \n\n  let projDir = new Directory(\n    \"projects\",\n    rootDir,\n    undefined,\n    [\n      mathsoclib\n    ]\n  )\n\n  let hackathons = new Directory(\n    \"hackathons\",\n    rootDir,\n  )\n\n  let internships = new Directory(\n    \"internships\",\n    rootDir,\n  )\n\n  rootDir.subdirectories = [\n    projDir,\n    hackathons,\n    internships\n  ]\n\n  return rootDir\n\n\n}\n\n","import React, { FC, ReactComponentElement, useEffect, useState } from 'react';\nimport './Console.css';\nimport ConsoleLine from '../../components/ConsoleLine/ConsoleLine'\nimport ConsoleInput from '../../components/ConsoleInput/ConsoleInput';\nimport { Directory, initializeDir, File } from '../../models/directory';\n\n\n\nfunction Console() {\n\n  let [userInput, setUserInput] = useState<String>();\n\n\n  const initialScreen = [\n    <ConsoleLine><div className=\"text-red-400\">ðŸ’» Welcome to âœ¨Bill Cuiâ€™s Websiteâœ¨ LTS (GNU/Linux 4.19.104-microsoft-standard x86_64) ðŸ’»</div></ConsoleLine>,\n    <ConsoleLine className=\"mx-4 mt-5\"><div className=\"text-yellow-400 inline\">* Documentation:</div>  Billâ€™s Resume</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-yellow-400 inline\">* Management:</div>     https://github.com/billcui57</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-yellow-400 inline\">* Support:</div>        https://linkedin.com/in/billcui57</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-yellow-400 inline\">* Contact:</div>        billcui2001@hotmail.com</ConsoleLine>,\n    <ConsoleLine className=\"mx-4 mt-5\">System information as of <div className=\"text-green-400 inline\">{new Date().toString()}</div></ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-yellow-400 inline\">Education Status: </div> University of Waterloo Computer Science 2B</ConsoleLine>,\n    <ConsoleLine className=\"mt-5\">This message is shown once a visit.</ConsoleLine>,\n    <ConsoleLine>Type <div className=\"text-green-400 inline\">help</div> for list of navigation commands</ConsoleLine>\n  ]\n\n\n  const help = [\n    <ConsoleLine className=\"mx-4\"><div className=\"text-green-400 inline\">* ls:</div> list navigation directory</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-green-400 inline\">* cd:</div> change navigation directory</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-green-400 inline\">* cat:</div> view a file in navigation directory</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-green-400 inline\">* clear:</div> clear terminal screen</ConsoleLine>,\n  ]\n\n  let [screen, setScreen] = useState<any[]>(initialScreen);\n\n\n  let [currDir, setCurrDir] = useState<Directory>(\n    () => initializeDir()\n  );\n\n\n\n  useEffect(() => {\n    const element = document.getElementById(\"bottom\");\n    element?.scrollIntoView({ behavior: 'smooth' })\n  })\n\n\nconsole.log(currDir.files)\n\n\n  const handlePressedEnter = () => {\n\n\n    let finalScreen: any[];\n\n    finalScreen = [...screen, <ConsoleLine ><div className=\"text-pink-500 inline\">{\"/\" + currDir.name}&gt;</div> {userInput}</ConsoleLine>];\n    setUserInput(\"\");\n\n\n    //empty command with only whitespaces\n    if (userInput?.length === 0 || !userInput?.trim()) {\n      //do nothing\n\n    }\n    //help\n    else if (userInput == \"help\") {\n      finalScreen =\n        [\n          ...finalScreen,\n          help\n        ]\n    }\n    //clear\n    else if (userInput === \"clear\") {\n      finalScreen = [];\n    }\n    //ls\n    else if (userInput === \"ls\") {\n      finalScreen =\n        [\n          ...finalScreen,\n          currDir.subdirectories?.map((subDir: Directory) => { return <ConsoleLine className=\"mr-4 inline-block \"><div className=\"text-green-400\">{\"/\" + subDir.name}</div></ConsoleLine> }),\n          currDir.files?.map((file: File) => { return <ConsoleLine className=\"mr-4 inline-block \"><div className=\"text-green-400\">{file.name}</div></ConsoleLine> })\n        ]\n\n    }\n    //cd\n    else if ((userInput.split(\" \")) && (userInput.split(\" \")[0] == \"cd\")) {\n      let requestedDirectory = userInput.split(\" \")[1];\n\n\n      //root\n      if (requestedDirectory === \"..\") {\n        let prevDir = currDir.parent;\n        if (prevDir) {\n          setCurrDir(prevDir);\n        } else {\n          finalScreen =\n            [\n              ...finalScreen,\n              <ConsoleLine ><div className=\"text-red-400 inline\">Root directory does not have a parent directory</div></ConsoleLine>,\n            ]\n        }\n      }\n      //elsewhere\n      else {\n        let cand = currDir.subdirectories?.find((dir) => ((dir.name === requestedDirectory) || ((\"/\" + dir.name) === requestedDirectory)));\n        if (cand) {\n          setCurrDir(cand)\n        } else {\n          finalScreen =\n            [\n              ...finalScreen,\n              <ConsoleLine ><div className=\"text-red-400 inline\">Directory name does not exist, type <div className=\"text-green-400 inline\">ls</div> for list of directories</div></ConsoleLine>,\n            ]\n        }\n      }\n    }\n    //cat \n    else if((userInput.split(\" \")) && (userInput.split(\" \")[0] == \"cat\")){\n      let requestedFile = userInput.split(\" \")[1];\n      let cand = currDir.files?.find((file) => (file.name === requestedFile));\n      if(cand){\n        finalScreen = [\n          ...finalScreen,\n          cand.display\n        ]\n      }else{\n        finalScreen =\n            [\n              ...finalScreen,\n              <ConsoleLine ><div className=\"text-red-400 inline\">File name does not exist, type <div className=\"text-green-400 inline\">ls</div> for list of files</div></ConsoleLine>,\n            ]\n      }\n    }\n    //invalid command\n    else {\n      finalScreen =\n        [\n          ...finalScreen,\n          <ConsoleLine ><div className=\"text-red-400 inline\">Invalid command, type <div className=\"text-green-400 inline\">help</div> for list of navigation commands</div></ConsoleLine>,\n        ]\n    }\n\n\n    finalScreen = [\n      ...finalScreen,\n      <div id=\"bottom\" > </div>,\n    ]\n    setScreen(finalScreen);\n\n\n\n  }\n\n\n\n  return (\n    <div className = \"animate-profile-fade-in\">\n      {screen}\n      <ConsoleInput setUserInput={setUserInput} handlePressedEnter={handlePressedEnter} userInput={userInput} currDir={currDir.name} ></ConsoleInput>\n    </div>\n  );\n}\n\nexport default Console;\n","export default __webpack_public_path__ + \"static/media/me.c00d2cb6.jpg\";","import React, { FC, ReactComponentElement, useEffect, useState } from 'react';\nimport './App.css';\nimport Console from './components/Console/Console'\nimport Me from './assets/me.jpg'\n\n\nfunction App() {\n\n\n  const displayStartingScreenComing = () => {\n    return (\n\n      <div className=\"animate-profile-fade-in\">\n        <img src={Me} className=\"w-1/3 rounded-full mx-auto mt-10\"></img>\n      </div>\n\n    )\n  }\n\n  const displayStartingScreen = () => {\n    return (\n      <div>\n        <div>\n          <img src={Me} className=\"w-1/3 rounded-full mx-auto mt-10\"></img>\n          <h1 className=\" text-console-white text-center text-4xl mt-4 animate-profile-fade-in\">Hi, I'm Bill Cui.</h1>\n        </div>\n\n        <div className=\"flex justify-center mt-5 animate-profile-fade-in\">\n          <input type=\"button\" className=\"animate-pulse bg-gray-400 rounded-full p-3 mx-2 hover:bg-pink-600 hover:text-white cursor-pointer duration-300 ease-in-out\" value=\"Begin\" onClick={() => transitionToConsole()}></input>\n        </div>\n      </div>\n    )\n  }\n\n  const displayStartingScreenLeaving = () => {\n    return (\n      <div className=\"animate-profile-fade-out \">\n        <div >\n          <img src={Me} className=\"w-1/3 rounded-full mx-auto mt-10\"></img>\n          <h1 className=\" text-console-white text-center text-4xl mt-4\">Hi, I'm Bill Cui.</h1>\n        </div>\n\n        <div className=\"flex justify-center mt-5\">\n          <input type=\"button\" className=\" bg-gray-400 rounded-full p-3 mx-2 hover:bg-pink-600 hover:text-white cursor-pointer duration-300 ease-in-out\" value=\"Begin\"></input>\n        </div>\n      </div>\n    )\n  }\n\n  const [displayComponent, setDisplayComponent] = useState<any | undefined>(displayStartingScreenComing())\n\n\n  const transitionToConsole = () => {\n    setDisplayComponent(() => displayStartingScreenLeaving())\n    setTimeout(() => {\n      setDisplayComponent(<Console></Console>)\n    }, 950)\n  }\n\n  useEffect(() => {\n    setTimeout(() => {\n      setDisplayComponent(displayStartingScreen())\n    }, 500)\n  }, [])\n\n\n\n  return (\n    <div className=\"font-console\">\n\n\n      {displayComponent ? displayComponent : undefined}\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}