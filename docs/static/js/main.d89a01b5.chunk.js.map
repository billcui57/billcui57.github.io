{"version":3,"sources":["components/ConsoleLine/ConsoleLine.tsx","components/ConsoleInput/ConsoleInput.tsx","models/directory.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ConsoleLine","children","className","ConsoleInput","setUserInput","userInput","handlePressedEnter","currDir","autoFocus","type","onChange","event","target","value","onKeyDown","key","Directory","name","parent","subdirectories","files","this","App","useState","initialScreen","Date","toString","help","screen","setScreen","rootDir","projDir","hackathons","internships","getRootDir","setCurrDir","useEffect","element","document","getElementById","scrollIntoView","behavior","finalScreen","length","trim","map","subDir","split","requestedDirectory","prevDir","cand","find","dir","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d89a01b5.chunk.js","sourcesContent":["import React from 'react';\nimport './ConsoleLine.css';\n\n\ninterface ConsoleLineProps {\n  children : any,\n  className? : any\n}\n\n\nfunction ConsoleLine({ children, className}: ConsoleLineProps) {\n  return (\n    <div className = {`px-1 pt-1 ${className}`}>\n\n        <p className={`text-2xl text-console-white`}> {children}</p>\n\n\n    </div>\n  );\n}\n\nexport default ConsoleLine;\n","import React, { FormEvent, SyntheticEvent } from 'react';\nimport './ConsoleInput.css';\n\nfunction ConsoleInput({ setUserInput, userInput,  handlePressedEnter, currDir}: {setUserInput: any, handlePressedEnter:any, userInput:any, currDir: string}) {\n\n\n  const handleUserTyping = (event:SyntheticEvent ) => {\n    let target= event.target as HTMLInputElement;\n    \n  \n    setUserInput(target.value);\n    \n  }\n\n  const handleUserKeyDown = (event: any) => {\n    if(event.key === 'Enter'){\n      handlePressedEnter();\n    }\n  }\n\n\n  return (\n    <div >\n      <p className=\"text-pink-500 text-2xl pl-1 pt-1 bg-transparent inline\" >{\"/\" + currDir}&gt; </p>\n      <input className=\"text-console-white text-2xl pt-1 bg-transparent inline outline-none w-10/12 text-pink-500 \" autoFocus type=\"text\" onChange={handleUserTyping} onKeyDown={handleUserKeyDown} value={userInput}></input>\n    </div>\n  );\n}\n\nexport default ConsoleInput;\n","\n\n\nexport interface File {\n  name: string;\n  url: string;\n}\n\n\n\n\nexport class Directory {\n\n  name: string;\n  parent?: Directory;\n  subdirectories?: Directory[];\n  files?: File[];\n\n  constructor(name: string, parent?: Directory, subdirectories?: Directory[], files?: File[]) {\n    this.name = name;\n    this.parent = parent;\n    this.subdirectories = subdirectories;\n    this.files = files;\n  }\n\n}\n\n\n\n\n\n\nexport function getRootDir() {\n  let rootDir = new Directory(\n    \"\"\n  )\n\n\n  let projDir = new Directory(\n    \"projects\",\n    rootDir,\n    \n  )\n\n  let hackathons = new Directory(\n    \"hackathons\",\n    rootDir,\n  )\n\n  let internships = new Directory(\n    \"internships\",\n    rootDir,\n  )\n\n  rootDir.subdirectories = [\n    projDir,\n    hackathons,\n    internships\n  ]\n\n  return rootDir\n\n\n}\n\n","import React, { FC, ReactComponentElement, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ConsoleLine from './components/ConsoleLine/ConsoleLine'\nimport ConsoleInput from './components/ConsoleInput/ConsoleInput';\nimport { Directory, getRootDir } from './models/directory';\n\n\n\nfunction App() {\n\n  let [userInput, setUserInput] = useState<String>();\n\n\n  const initialScreen = [\n    <ConsoleLine><div className=\"text-red-400 inline\">ðŸ’» Welcome to âœ¨Bill Cuiâ€™s Websiteâœ¨ LTS (GNU/Linux 4.19.104-microsoft-standard x86_64) ðŸ’»</div></ConsoleLine>,\n    <ConsoleLine className=\"mx-4 mt-5\"><div className=\"text-yellow-400 inline\">* Documentation:</div>  Billâ€™s Resume</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-yellow-400 inline\">* Management:</div>     https://github.com/billcui57</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-yellow-400 inline\">* Support:</div>        https://linkedin.com/in/billcui57</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-yellow-400 inline\">* Contact:</div>        billcui2001@hotmail.com</ConsoleLine>,\n    <ConsoleLine className=\"mx-4 mt-5\">System information as of <div className=\"text-green-400 inline\">{new Date().toString()}</div></ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-yellow-400 inline\">Education Status: </div> University of Waterloo Computer Science 2B</ConsoleLine>,\n    <ConsoleLine className=\"mt-5\">This message is shown once a visit.</ConsoleLine>,\n    <ConsoleLine>Type <div className=\"text-green-400 inline\">help</div> for list of navigation commands</ConsoleLine>\n  ]\n\n\n  const help = [\n    <ConsoleLine className=\"mx-4\"><div className=\"text-green-400 inline\">* ls:</div> list navigation directory</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-green-400 inline\">* cd:</div> change navigation directory</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-green-400 inline\">* cat:</div> view a file in navigation directory</ConsoleLine>,\n    <ConsoleLine className=\"mx-4\"><div className=\"text-green-400 inline\">* clear:</div> clear terminal screen</ConsoleLine>,\n  ]\n\n  let [screen, setScreen] = useState<any[]>(initialScreen);\n\n\n  let [currDir, setCurrDir] = useState<Directory>(\n    () => getRootDir()\n  );\n\n\n\n    useEffect(() => {\n      const element = document.getElementById(\"bottom\");\n      element?.scrollIntoView({behavior: 'smooth'})\n    })\n  \n\n\n\n\n  const handlePressedEnter = () => {\n\n\n    let finalScreen: any[];\n\n    finalScreen = [...screen, <ConsoleLine ><div className=\"text-pink-500 inline\">{\"/\" + currDir.name}&gt;</div> {userInput}</ConsoleLine>];\n    setUserInput(\"\");\n\n\n    //empty command with only whitespaces\n    if (userInput?.length === 0 || !userInput?.trim()) {\n      //do nothing\n\n    } \n    //help\n    else if (userInput == \"help\") {\n      finalScreen =\n        [\n          ...finalScreen,\n          help\n        ]\n    } \n    //clear\n    else if (userInput === \"clear\") {\n      finalScreen = [];\n    } \n    //ls\n    else if (userInput === \"ls\") {\n      finalScreen =\n        [\n          ...finalScreen,\n          currDir.subdirectories?.map((subDir: Directory) => { return <ConsoleLine className=\"mr-4 inline-block \"><div className=\"text-green-400\">{\"/\" + subDir.name}</div></ConsoleLine> })\n        ]\n\n    } \n    //cd\n    else if ((userInput.split(\" \")) && (userInput.split(\" \")[0] == \"cd\")) {\n      let requestedDirectory = userInput.split(\" \")[1];\n\n\n      //root\n      if (requestedDirectory == \"..\") {\n        let prevDir = currDir.parent;\n        if (prevDir) {\n          setCurrDir(prevDir);\n        } else {\n          finalScreen =\n            [\n              ...finalScreen,\n              <ConsoleLine ><div className=\"text-red-400 inline\">Root directory does not have a parent directory</div></ConsoleLine>,\n            ]\n        }\n      }\n      //elsewhere\n      else {\n        let cand = currDir.subdirectories?.find((dir) => ((dir.name === requestedDirectory) || ((\"/\" + dir.name) === requestedDirectory)));\n        if (cand) {\n          setCurrDir(cand)\n        } else {\n          finalScreen =\n            [\n              ...finalScreen,\n              <ConsoleLine ><div className=\"text-red-400 inline\">Directory name does not exist, type <div className=\"text-green-400 inline\">ls</div> for list of directories</div></ConsoleLine>,\n            ]\n        }\n      }\n    }\n    //invalid command\n    else {\n      finalScreen =\n        [\n          ...finalScreen,\n          <ConsoleLine ><div className=\"text-red-400 inline\">Invalid command, type <div className=\"text-green-400 inline\">help</div> for list of navigation commands</div></ConsoleLine>,\n        ]\n    }\n\n\n    finalScreen = [\n      ...finalScreen,\n      <div id=\"bottom\" > </div>,\n    ]\n    setScreen(finalScreen);\n    \n\n\n  }\n\n\n\n  return (\n    <div className=\"font-console\">\n      {screen}\n      <ConsoleInput setUserInput={setUserInput} handlePressedEnter={handlePressedEnter} userInput={userInput} currDir={currDir.name} ></ConsoleInput>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}